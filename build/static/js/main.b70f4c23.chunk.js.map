{"version":3,"sources":["logo.svg","CountryList.js","NewsHeadline.js","NewsList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CountryList","_this","this","react_default","a","createElement","class","onClick","props","addnews","Component","NewsHeadline","className","style","display","flexDirection","marginLeft","src","_news","urlToImage","width","height","description","href","url","NewsList","news","map","src_NewsHeadline","key","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","addtonews","country","setState","loading","fetch","concat","then","Response","json","articles","console","log","state","time","Date","toLocaleTimeString","_this2","setInterval","logo","alt","target","src_CountryList","src_NewsList","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b70f4c23.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport './buttons.css';\n\nclass CountryList extends Component{\n    \n   \n    render(){\n        return(\n            <div >\n        \n\n                <button class=\"button\" onClick={()=>this.props.addnews(\"in\")}>India</button>\n                \n                <button class=\"button\" onClick={()=>this.props.addnews(\"us\")}>United States of America</button>\n                <button class=\"button\" onClick={()=>this.props.addnews(\"ru\")}>Russia</button>\n                <button class=\"button\" onClick={()=>this.props.addnews(\"gb\")}>Great Britain</button>\n                <button class=\"button\" onClick={()=>this.props.addnews(\"ca\")}>Canada</button>\n                <button class=\"button\" onClick={()=>this.props.addnews(\"aus\")}>Australia</button>\n\n               \n\n            </div>\n        );\n    }\n}\nexport default CountryList;","import React, { Component } from 'react';\n\n\nclass NewsHeadline extends Component{\n    render(){\n        return(\n           \n                <div>\n\n                \n                <div className=\"box\">\n\n                <div style={{display:\"flex\",flexDirection:\"row\",marginLeft:\"10px\"}}><img src={this.props._news.urlToImage} width=\"180\" height=\"120\"/>\n               \n                <div style={{marginLeft:\"10px\"}}>{this.props._news.description}</div>\n                \n                   <p>\n                   <br />\n                   <br />\n                   <small><a href={this.props._news.url}>For More Information</a></small>\n                   </p>\n                \n\n                </div>\n                </div>\n                </div>\n              \n            \n        );\n    }\n}\nexport default NewsHeadline;","import React, { Component } from 'react';\nimport NewsHeadline from './NewsHeadline';\n\nclass NewsList extends Component{\n    \n    \n    \n    render(){\n        return(\n            <div >\n                    \n                {\n                    this.props.news.map((_news)=><NewsHeadline key={_news} _news={_news}/>)\n                }\n               \n            </div>\n        );\n    }\n}\nexport default NewsList;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CountryList from './CountryList';\nimport NewsList from './NewsList';\n\n//<div>{this.state.loading && <img src=\"https://upload.wikimedia.org/wikipedia/commons/b/b1/Loading_icon.gif\"/>}</div> \nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={news:[],loading:false,time: new Date().toLocaleTimeString()};\n}\naddtonews=(country)=>\n{\n  \n  this.setState({loading:true});\n  \n                \n  fetch(`https://newsapi.org/v2/top-headlines?source=google-news&country=${country}&apiKey=6289893ecdef4daea456948ce2791e3b`).\n  then((Response)=>{return Response.json()}).then((json)=>{this.setState({news:json.articles,loading:false},()=>{console.log(json.articles)})});\n\n}\n\ncomponentDidMount() {\n        \n  setInterval(() => this.setState({\n  time: new Date().toLocaleTimeString()\n}),1000);}\n\n\n\n  render() {\n    return (\n      <div className=\"container\">\n      \n     \n      \n        <div className=\"box\">\n          <p>\n          \n        <img src={logo} height=\"300\" width=\"150\" className=\"App-logo\" alt=\"logo\" />\n          </p>\n        \n          <h2>Made in React JS</h2>\n          <small>Made with â™¥ by <a href=\"https://github.com/tamaghno\" target=\"_blank\">Tamaghno Chaudhuri</a></small>\n         <br />\n          <small>The time is {this.state.time}</small>\n          <h1>SELECT A COUNTRY TO READ ITS TOP NEWS HEADLINES</h1>\n        </div>\n         \n        \n      <CountryList loading={this.state.loading} addnews={this.addtonews}/>\n      {this.state.loading&&<img src=\"https://camo.githubusercontent.com/9be29021cfdb21b2cc257a3efcb269f64d42f5b6/687474703a2f2f32352e6d656469612e74756d626c722e636f6d2f63393961353739646233616530666331363462663463636131343838383564332f74756d626c725f6d6a6776386b45754d67317338376e37396f315f3430302e676966\"/>}\n     {!this.state.loading && <NewsList loading={this.state.loading} news={this.state.news}/>}\n      \n\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}